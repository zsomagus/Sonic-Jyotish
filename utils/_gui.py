import tkinter as tk
from tkinter import messagebox, ttk
from data import save_data, load_data, set_entry, update_fields
import json
import astro_chart
import _location_utils
from _config import varga_factors
import _coordinates
import _config 
# F≈ëablak l√©trehoz√°sa
root = tk.Tk()
root.title("Hindu-V√©dikus asztrol√≥giai Hang Elemz≈ë program-- Kozmikus √∂nval√≥nk templom√°nak hangz√°svil√©ga.")
# GUI-hoz sz√ºks√©ges √°llapotok
is_playing = False
rasi_or_varga = tk.StringVar(value="rasi")  # kapcsol√≥ √©rt√©ke: "rasi" vagy "varga"




# UI elemek l√©trehoz√°sa
tk.Label(root, text="Vezet√©kn√©v:").grid(row=0, column=0, padx=5, pady=5)
vezetek_nev_entry = tk.Entry(root)
vezetek_nev_entry.grid(row=0, column=1, padx=5, pady=5)

tk.Label(root, text="Keresztn√©v:").grid(row=0, column=2, padx=5, pady=5)
kereszt_nev_entry = tk.Entry(root)
kereszt_nev_entry.grid(row=0, column=3, padx=5, pady=5)

tk.Label(root, text="D√°tum (YYYY-MM-DD):").grid(row=1, column=0, padx=5, pady=5)
date_entry = tk.Entry(root)
date_entry.grid(row=1, column=1, padx=5, pady=5)

tk.Label(root, text="Id≈ë (HH:MM:SS):").grid(row=1, column=2, padx=5, pady=5)
time_entry = tk.Entry(root)
time_entry.grid(row=1, column=3, padx=5, pady=5)



tk.Label(root, text="Id≈ëz√≥na:").grid(row=3, column=0, padx=5, pady=5)
ido_zona_var = tk.StringVar()
ido_zona_entry = ttk.Combobox(root, textvariable=ido_zona_var, values=all_timezones, width=30)
ido_zona_entry.set("Europe/Budapest")  # alap√©rtelmezett
ido_zona_entry.grid(row=3, column=1, padx=5, pady=5)

tk.Label(root, text="UTC id≈ë:").grid(row=4, column=0, padx=5, pady=5)
utc_entry = tk.Entry(root)
utc_entry.grid(row=4, column=1, padx=5, pady=5)

# Ny√°ri id≈ësz√°m√≠t√°s jel√∂l≈ën√©gyzet
nyari_idoszamitas_var = tk.BooleanVar(value=False)
nyari_idoszamitas_checkbox = tk.Checkbutton(
    root, text="√ârv√©nyes", variable=nyari_idoszamitas_var)
nyari_idoszamitas_checkbox.grid(row=3, column=3, padx=5, pady=5)

# Dropdown men√º a szem√©lyekhez
tk.Label(root, text="Szem√©lyek:").grid(row=4, column=0, padx=5, pady=5)
selected_person = tk.StringVar(root)
dropdown_person = ttk.Combobox(root, textvariable=selected_person)
dropdown_person.grid(row=4, column=1, padx=5, pady=5)
dropdown_person.bind("<<ComboboxSelected>>", update_fields)
# Dropdown men√º a r√©szhoroszk√≥pokhoz
tk.Label(root, text="R√©szhoroszk√≥pok:").grid(row=4, column=2, padx=5, pady=5)

selected_varga = tk.StringVar(root)
selected_varga.set('D1 (Rashi)')  # alap√©rtelmezett

dropdown_varga = ttk.Combobox(
    root,
    textvariable=selected_varga,
    values=list(varga_factors.keys()),
    state='readonly'
)
dropdown_varga.grid(row=4, column=3, padx=5, pady=5)

save_button = tk.Button(root, text="Adatok ment√©se", command=save_data)
save_button.grid(row=5, column=1, padx=2, pady=10, sticky="w")

# Adatok bet√∂lt√©se
load_button = tk.Button(root, text="Adatok bet√∂lt√©se", command=load_data)
load_button.grid(row=5, column=2, padx=5, pady=10)

latitude_var = tk.StringVar()
longitude_var = tk.StringVar()


# Sz√©less√©gi fok (latitude)
tk.Label(root, text="Sz√©less√©gi fok (latitude) (tizedesponttal):").grid(row=2, column=0, padx=5, pady=5)
latitude_entry = tk.Entry(root, textvariable=latitude_var)
latitude_entry.grid(row=2, column=1, padx=5, pady=5)

# Hossz√∫s√°gi fok (longitude)
tk.Label(root, text="Hossz√∫s√°gi fok (longitude) (tizedesponttal):").grid(row=2, column=2, padx=5, pady=5)
longitude_entry = tk.Entry(root, textvariable=longitude_var)
longitude_entry.grid(row=2, column=3, padx=5, pady=5)

tk.Label(root, text="√çrja be a v√°ros nev√©t:").grid(row=2, column=4)
city_entry = tk.Entry(root)
city_entry.grid(row=2, column=5)

tk.Button(root, text="kit√∂lt√©s", command=search_coordinates).grid(row=3, column=5)

# üåÄ Varshaphala ‚Äì √âves horoszk√≥p
tk.Label(root, text="√âletkor (Varshaphala):").grid(row=6, column=4, padx=5, pady=5)
eletkor_entry = tk.Entry(root)
eletkor_entry.grid(row=6, column=5, padx=5, pady=5)

tk.Button(root, text="Varshaphala k√©sz√≠t√©se", command=lambda: calculate_varshaphala_chart()).grid(row=5, column=5, padx=5, pady=5)
# Gomb hozz√°ad√°sa a fel√ºlethez
tk.Button(root, text="‚è± Prashna (Most horoszk√≥p)", command=fill_prashna_data).grid(row=5, column=3, padx=5, pady=10)

# V√©g√ºl gombk√∂t√©s:
tk.Button(root, text="kotta ment√©se", command=lambda: save_kotta_pdf(kotta_adatok, vezetek_nev_entry.get(), kereszt_nev_entry.get())).grid(row=7, column=6, pady=10)
# Gombok
tk.Label(root, text="Hang forr√°s:").grid(row=6, column=0)
tk.Radiobutton(root, text="Rashi", variable=rasi_or_varga, value="rasi").grid(row=7, column=0)
tk.Radiobutton(root, text="R√©szhoroszk√≥p", variable=rasi_or_varga, value="varga").grid(row=7, column=1)

tk.Button(root, text="‚ñ∂Ô∏è Play", command=lambda: play_all_layers(last_planet_positions)).grid(row=7, column=3, pady=10)
tk.Button(root, text="üíæ WAV ment√©s", command=lambda: save_combined_wave(last_planet_positions)).grid(row=7, column=5, pady=10)
# GUI gombok √©s funkci√≥k
def stop_playback():
    global is_playing
    is_playing = False
    sd.stop()
    print("Lej√°tsz√°s le√°ll√≠tva")
    
tk.Button(root, text="‚èπ Stop", command=stop_playback).grid(row=7, column=4, pady=10)
chart_button = tk.Button(root, text="Horoszk√≥p rajzol√°sa", command=draw_chart_for_current_input)
chart_button.grid(row=5, column=4, padx=10, pady=10)
